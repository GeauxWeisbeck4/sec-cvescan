#!/bin/bash
# Copyright (C) 2019 Canonical, Ltd.
# Author: Mark Morlino <mark.morlino@canonical.com>
# License: GPLv3

error() {
	echo "Error: $*" >&2
	exit 4
}

usage() {
	cat <<-EOF
		Usage $0 [ -a ] [ -p <critical|high|medium|all> ] [ -c CVE-identifier ] [ -r ] [ -v ]
		         -a show all CVEs impacting this system
		            Default is to only show CVEs impacting this system if there is 
		            an update that fixes them.
		         -p <critical|high|medium|all>
		            critical = show only critical CVEs
		            high     = show critical and high CVEs
		            medium   = show critical and high and medium CVEs
		            all      = show all CVES (no filtering based on priority)
		         -c <cve-identifier> 
		            Report if this system is vulnerable to a specific CVE
		            Specifying this forces '-a' to search all CVEs.
		            Specifying this forces '-p all' to search all CVEs.
		         -s enable script/silent mode
		            To be used with -c CVE-1984-54321, do not print text output
		            exit 0 if not vulnerable, exit 1 if vulnerable
		         -m <xenial|bionic|disco|eoan>
		            Enable manifest mode
		            Do not scan localhost. Instead run a scan against a Ubuntu Official Cloud 
		            Image package manifest file.
                            The script will use a server manifest file.
		            This enables the -r option.
		         -n enable nagios mode
		            Typical nagios-style "OK|WARNING|CRITICAL|UNKNOWN" messages with 0-3 exit codes
		            0/OK = not vulnerable to any CVEs
		            1/WARNING = vulnerable to CVEs for which there is no available fix
		            2/CRITICAL = vulnerable to CVEs that have fixes available in updated packages
		            3/UNKNOWN = something went wrong with the script, or the scan
		         -r remove zip, oval, xml, and htm files to force redownload/regeneration
		            Default is to use them if they already exist and are less than 1 day old
		         -v enable verbose messages
		            Default is just to print a list of CVEs
	EOF
	exit 3
}

# calls to lsb_release removed and implemented in bash for snap compatibility
if ! test -f /etc/lsb-release ; then
	error "No /etc/lsb-release file found, not running"
fi

if ! grep -q -E '^DISTRIB_ID=Ubuntu$' /etc/lsb-release; then
	error "DISTRIB_ID=Ubuntu not in /etc/lsb-release, not running"
fi

RELEASE=$(grep -E '^DISTRIB_CODENAME=' /etc/lsb-release | cut -d= -f2)
OVAL_FILE=com.ubuntu.${RELEASE}.cve.oval.xml
OVAL_ZIP=${OVAL_FILE}.bz2
OVAL_BASE_URL='https://people.canonical.com/~ubuntu-security/oval'
RESULTS=results.xml
REPORT=report.htm
LOG=oval.log
VERBOSE=false
REMOVE=false
SILENT=false
NAGIOS=false
MANIFEST=false
MANIFEST_FILE=manifest
ALL=false
PRIORITY=medium
NOW=$(date +%s)
EXPIRE=86400
SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
XSLT_FILE=${SCRIPTDIR}/text.xsl
VERBOSE_OSCAP_OPTIONS=""

while getopts ":ac:p:rsnm:v" op ; do
	case "${op}" in
		a)
			ALL=true
			;;
		c)
			if [[ ${OPTARG} =~ ^CVE-[0-9]{4}-[0-9]{1,6}$ ]] ; then
				CVE=${OPTARG}
			else
				usage
			fi
			;;
		p)
			if [[ ${OPTARG} =~ ^(critical|high|medium|all)$ ]] ; then
				PRIORITY=${OPTARG}
			else
				usage
			fi
			;;
		r)
			REMOVE=true
			;;
		s)
			SILENT=true
			;;
		m)
			MANIFEST=true
			REMOVE=true
			if [[ ${OPTARG} =~ ^(xenial|bionic|disco|eoan)$ ]] ; then
				RELEASE=${OPTARG}
				OVAL_FILE=oci.com.ubuntu.${RELEASE}.cve.oval.xml
				OVAL_ZIP=${OVAL_FILE}.bz2
				MANIFEST_URL="https://cloud-images.ubuntu.com/${RELEASE}/current/${RELEASE}-server-cloudimg-amd64.manifest"
			else
				usage
			fi
			;;
		n)
			NAGIOS=true
			;;
		v)
			VERBOSE=true
			VERBOSE_OSCAP_OPTIONS="--verbose WARNING --verbose-log-file debug.log"
			;;
		*)
			usage
			;;
	esac
done
shift $((OPTIND-1))

if [[ -n "$SNAP_USER_COMMON" ]] ; then
	$VERBOSE && echo "Running as a snap, changing to '$SNAP_USER_COMMON' directory"
	cd $SNAP_USER_COMMON
else
        [[ -x $(which oscap) ]]     || error "Missing oscap command. Run 'sudo apt install libopenscap8'"
        [[ -x $(which  xsltproc) ]] || error "Missing xsltproc command. Run 'sudo apt install xsltproc'"

fi

[[ -f "$XSLT_FILE" ]] || error "Missing text.xsl file at '$XSLT_FILE'"

$VERBOSE && $ALL && echo "Reporting on ALL CVEs, not just those that can be fixed by updates"
$VERBOSE && $NAGIOS && echo "Running in Nagios Mode"
$VERBOSE && echo "Priority filter is '$PRIORITY'"
if [[ -f "$MANIFEST_FILE" && ! $($REMOVE) && ! $($MANIFEST) ]] ; then
	$VERBOSE && echo "$MANIFEST_FILE found when not in manifest mode, enabling -r option"
	REMOVE=true
fi
$VERBOSE && $REMOVE && echo "Removing files: $OVAL_FILE $OVAL_ZIP $REPORT $RESULTS $LOG $MANIFEST_FILE"
$REMOVE && rm -f "$OVAL_FILE" "$OVAL_ZIP" "$REPORT" "$RESULTS" "$LOG" "$MANIFEST_FILE"

if [[ ! -f $OVAL_FILE || $((NOW - $(stat -c %Y "$OVAL_FILE"))) -gt $EXPIRE ]] ; then
	$VERBOSE && echo "Downloading ${OVAL_BASE_URL}/${OVAL_ZIP}"
	if curl -f -s "${OVAL_BASE_URL}/${OVAL_ZIP}" -o "${OVAL_ZIP}"; then
		$VERBOSE && echo "Unzipping ${OVAL_ZIP}"
		if ! bunzip2 -f "$OVAL_ZIP" ; then
			error "Failed to unzip $OVAL_ZIP"
		fi
		if [[ -n "$SNAP_USER_COMMON" ]] ; then
			sed -i ':a;N;$!ba;s#<ind-def:path>/etc</ind-def:path>\s\+<ind-def:filename>lsb-release</ind-def:filename>#<ind-def:filepath>/etc/lsb-release</ind-def:filepath>#' "${OVAL_FILE}"
		fi
	else
		error "Failed to curl ${OVAL_BASE_URL}/${OVAL_ZIP}"
	fi
fi

if $MANIFEST ; then
	if [[ ! -f $MANIFEST_FILE || $((NOW - $(stat -c %Y "$MANIFEST_FILE"))) -gt $EXPIRE ]] ; then
		$VERBOSE && echo "Downloading ${MANIFEST_URL}"
		if ! curl -f -s "${MANIFEST_URL}" -o "${MANIFEST_FILE}" ; then
			error "Failed to curl ${MANIFEST_FILE} from ${MANIFEST_URL}"
		fi
	fi
fi

if [[ ! -f $RESULTS || $((NOW - $(stat -c %Y "$RESULTS"))) -gt $EXPIRE ]] ; then
	$VERBOSE && echo "Running oval scan oscap oval eval $VERBOSE_OSCAP_OPTIONS --results $RESULTS $OVAL_FILE (output logged to $LOG)"
	if ! oscap oval eval $VERBOSE_OSCAP_OPTIONS --results "$RESULTS" "$OVAL_FILE" >$LOG 2>&1 ; then
		error "Failed to run oval scan"
	fi
fi

if [[ ! -f $REPORT ||$((NOW - $(stat -c %Y "$REPORT"))) -gt $EXPIRE  ]] ; then
	$VERBOSE && echo "Generating oval report from scan results (output logged to $LOG)"
	if ! oscap oval generate report --output $REPORT $RESULTS >>$LOG 2>&1 ; then
		error "Failed to generate oval report"
	fi
fi

$VERBOSE && echo "Running xsltproc to generate CVE list - fixable/unfixable and filtered by priority"
CVE_LIST_ALL_FILTERED=$(xsltproc --stringparam showAll true --stringparam priority "$PRIORITY" "$XSLT_FILE" "$RESULTS" | sed /^$/d)
if [[ -z "$CVE_LIST_ALL_FILTERED" ]] ; then
	CVE_COUNT_ALL_FILTERED=0
else
	CVE_COUNT_ALL_FILTERED=$(wc -l <<<"$CVE_LIST_ALL_FILTERED")
fi
$VERBOSE && echo "$CVE_COUNT_ALL_FILTERED vulnerabilities found with priority of $PRIORITY or higher:"
## $VERBOSE && echo "$CVE_LIST_ALL_FILTERED"

$VERBOSE && echo "Running xsltproc to generate CVE list - fixable and filtered by priority"
CVE_LIST_FIXABLE_FILTERED=$(xsltproc --stringparam showAll false --stringparam priority "$PRIORITY" "$XSLT_FILE" "$RESULTS" | sed /^$/d)
if [[ -z "$CVE_LIST_FIXABLE_FILTERED" ]] ; then
	CVE_COUNT_FIXABLE_FILTERED=0
else
	CVE_COUNT_FIXABLE_FILTERED=$(wc -l <<<"$CVE_LIST_FIXABLE_FILTERED")
fi
$VERBOSE && echo "$CVE_COUNT_FIXABLE_FILTERED vulnerabilities found with priority of $PRIORITY or higher that can be fixed with package updates:"
## $VERBOSE && echo "$CVE_LIST_FIXABLE_FILTERED"

$VERBOSE && echo "Full HTML report availble in $REPORT"
$VERBOSE && echo

if $NAGIOS  ; then
	if [[ -z "$CVE_LIST_FIXABLE_FILTERED" ]] ; then
		echo "OK: not vulnerable to any known $PRIORITY or higher CVEs that can be fixed by updating"
		exit 0
	elif [ -n "$CVE_LIST_FIXABLE_FILTERED" ] ; then
		echo "CRITICAL: vulnerable to $CVE_COUNT_FIXABLE_FILTERED CVEs with priority $PRIORITY or higher that can be fixed with package updates"
		echo "$CVE_LIST_FIXABLE_FILTERED"
		exit 2
	elif [ -n "$CVE_LIST_ALL_FILTERED" ] ; then
		echo "WARNING: vulnerable to $CVE_COUNT_ALL_FILTERED CVEs that can be fixed with package updates"
		echo "$CVE_LIST_ALL_FILTERED"
		exit 1
	else
		echo "UNKNOWN: something went wrong with $0"
		exit 3
	fi
elif [ -n "$CVE" ]  ; then

	$VERBOSE && echo "Running xsltproc to generate CVE list - fixable and unfixable, any priority"
	CVE_LIST_ALL=$(xsltproc --stringparam showAll true --stringparam priority all "$XSLT_FILE" $RESULTS | sed /^$/d)
	if [[ -z "$CVE_LIST_ALL" ]] ; then
		CVE_COUNT_ALL=0
	else
		CVE_COUNT_ALL=$(wc -l <<<"$CVE_LIST_ALL")
	fi
	$VERBOSE && echo "$CVE_COUNT_ALL fixable and unfixable vulnerabilities with any priority found:"
	## $VERBOSE && echo "$CVE_LIST_ALL"

	if grep -q "$CVE" <<<"$CVE_LIST_ALL" ; then
		$SILENT || echo "$CVE vulnerable"
		exit 1
	else
		$SILENT || echo "$CVE not vulnerable"
		exit 0
	fi
else
	if $ALL ; then
		if [ -n "$CVE_LIST_ALL_FILTERED" ] ; then
			echo "$CVE_LIST_ALL_FILTERED"
			exit 1
		else
			exit 0
		fi
	else
		if [ -n "$CVE_LIST_FIXABLE_FILTERED" ] ; then
			echo "$CVE_LIST_FIXABLE_FILTERED"
			exit 1
		else
			exit 0
		fi
	fi
fi
		

